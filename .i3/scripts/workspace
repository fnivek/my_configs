#!/usr/bin/env python3

import argparse
import i3ipc


def parse_args():
    """
    Parse input arguments
    """
    parser = argparse.ArgumentParser(description='Change the workspace')

    # Main arguments, used for paper's experiments
    parser.add_argument('workspace', type=str, help='name of the workspace to goto')
    parser.add_argument('-m', '--move', action='store_true', help='move the focus window')
    parser.add_argument('-f', '--follow', action='store_true',
                        help='if moving then follow the moved window')

    return parser.parse_args()


def get_workspace_second_key(ws):
    second_key = 0
    try:
        second_key = int(ws.name.split(':')[1])
    except (ValueError, IndexError):
        pass
    return second_key


if __name__ == '__main__':
    # I3 interface
    i3 = i3ipc.Connection()

    # Workspace files
    workspace_file = "/home/fnivek/.i3/resources/workspaces.txt"
    named_workspaces = []
    with open(workspace_file) as file:
        named_workspaces = [line.strip() for line in file]

    # Get workspaces and sort them
    workspaces = i3.get_workspaces()
    workspaces.sort(key=lambda ws: (ws.num, get_workspace_second_key(ws)))
    current_workspace = next(filter(lambda ws: ws.focused, workspaces))
    current_named_workspaces = list(filter(lambda ws: ws.num == current_workspace.num, workspaces))
    for ws in current_named_workspaces:
        print(ws.name)
    index = current_named_workspaces.index(current_workspace)

    # Pars args
    args = parse_args()

    # Handle previous
    to_name = current_workspace.name
    if args.workspace == 'prev':
        to_name = current_named_workspaces[index - 1].name
    # Handle next
    elif args.workspace == 'next':
        to_name = current_named_workspaces[(index + 1) % len(current_named_workspaces)].name
    # Handle up
    if args.workspace == 'up':
        name_index = (current_workspace.num - 1) % len(named_workspaces)
        name = named_workspaces[name_index]
        to_name = '{}:{}:{}'.format(name_index, get_workspace_second_key(current_workspace), name)
    # Handle down
    if args.workspace == 'down':
        name_index = (current_workspace.num + 1) % len(named_workspaces)
        name = named_workspaces[name_index]
        to_name = '{}:{}:{}'.format(name_index, get_workspace_second_key(current_workspace), name)
    # Handle number
    else:
        try:
            to_name = '{}:{}:{}'.format(current_workspace.num,
                                        int(args.workspace),
                                        named_workspaces[current_workspace.num])
        except ValueError:
            pass

    # Move
    if args.move:
        i3.command('move container to workspace {}'.format(to_name))
        if args.follow:
            i3.command('workspace {}'.format(to_name))
    else:
        # Switch workspace
        i3.command('workspace {}'.format(to_name))
